#전 날 제작한 RC카의 수정 완성본
# 아두이노 10번 핀에 문제 발생. 문제 원인을 찾기 위해 차례차례 검토 과정 거침. 
# 1. 모터의 문제? > 선 연결을 바꿔서 구동시키며 모터의 문제가 아닌것을 파악함. 2. 모터 드라이버의 문제? > 모터 드라이버의 선을 바꿔가며 파악한 결과
# 결합이 헐겁다는 문제 파악. 그러나 고쳐지지 않았음  3. 아두이노? > 아두이노 연결 선을 바꿔끼며 알아본 결과 아두이노 10번 핀에 오류가 있다는 것을 파악함.

# <아두이노 완성 코드>

#include <Servo.h>

// 핀 정의
#define SERVO_PIN 9
#define BUZZER 13
#define ULTRASONIC_TRIG 12
#define ULTRASONIC_ECHO 7
#define MOTOR_LEFT_1 5
#define MOTOR_LEFT_2 6
#define MOTOR_RIGHT_1 3
#define MOTOR_RIGHT_2 11

// PWM 속도 설정
#define SPEED_LEFT 180
#define SPEED_RIGHT 170

Servo swatter;
char command = 'S';  // 기본 명령은 정지
long duration;
int distance;

void setup() {
  Serial.begin(9600);
  swatter.attach(SERVO_PIN);
  swatter.write(90);

  pinMode(BUZZER, OUTPUT);
  pinMode(ULTRASONIC_TRIG, OUTPUT);
  pinMode(ULTRASONIC_ECHO, INPUT);
  pinMode(MOTOR_LEFT_1, OUTPUT);
  pinMode(MOTOR_LEFT_2, OUTPUT);
  pinMode(MOTOR_RIGHT_1, OUTPUT);
  pinMode(MOTOR_RIGHT_2, OUTPUT);

  delay(2000);
  stopMotors();
}

void loop() {
  if (Serial.available()) {
    char temp = Serial.read();
    if (temp == 'F' || temp == 'B' || temp == 'L' || temp == 'R' || temp == 'S') {
      command = temp;
    }
  }

  switch (command) {
    case 'F': moveForward(); break;
    case 'B': moveBackward(); break;
    case 'L': turnLeft(); break;
    case 'R': turnRight(); break;
    case 'S': stopMotors(); break;
  }

  distance = getDistance();
  if (distance > 0 && distance < 30) {
    alertAndSwat();
  }

  delay(50);
}

// 🟢 모터 제어 함수들 (전부 analogWrite로 변경)
void moveForward() {
  analogWrite(MOTOR_LEFT_1, SPEED_LEFT); analogWrite(MOTOR_LEFT_2, 0);
  analogWrite(MOTOR_RIGHT_1, 0); analogWrite(MOTOR_RIGHT_2, SPEED_RIGHT);
}

void moveBackward() {
  analogWrite(MOTOR_LEFT_1, 0); analogWrite(MOTOR_LEFT_2, SPEED_LEFT);
  analogWrite(MOTOR_RIGHT_1, SPEED_RIGHT); analogWrite(MOTOR_RIGHT_2, 0);
}

void turnLeft() {
  analogWrite(MOTOR_LEFT_1, 0); analogWrite(MOTOR_LEFT_2, SPEED_LEFT);
  analogWrite(MOTOR_RIGHT_1, 0); analogWrite(MOTOR_RIGHT_2, SPEED_RIGHT);
}

void turnRight() {
  analogWrite(MOTOR_LEFT_1, SPEED_LEFT); analogWrite(MOTOR_LEFT_2, 0);
  analogWrite(MOTOR_RIGHT_1, SPEED_RIGHT); analogWrite(MOTOR_RIGHT_2, 0);
}

void stopMotors() {
  analogWrite(MOTOR_LEFT_1, 0); analogWrite(MOTOR_LEFT_2, 0);
  analogWrite(MOTOR_RIGHT_1, 0); analogWrite(MOTOR_RIGHT_2, 0);
}

// 🟡 초음파 거리 측정
int getDistance() {
  digitalWrite(ULTRASONIC_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(ULTRASONIC_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(ULTRASONIC_TRIG, LOW);

  duration = pulseIn(ULTRASONIC_ECHO, HIGH, 30000);
  return duration * 0.034 / 2;
}

// 🔴 파리채 + 부저 동작
void alertAndSwat() {
  tone(BUZZER, 1000, 300);
  swatter.write(0);
  delay(300);
  swatter.write(90);
  delay(500);
}




<esp 코드>
#include "BluetoothSerial.h"
BluetoothSerial SerialBT;
#define ARDUINO_TX 17  // ESP32 → Arduino (TX)
#define ARDUINO_RX 16  // ESP32 ← Arduino (RX)
HardwareSerial ArduinoSerial(2); // Serial2
void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32_BT_Car"); // 블루투스 장치 이름
  Serial.println("Bluetooth Started. Waiting for commands...");
  // Serial2 초기화: TX, RX 핀, Baudrate
  ArduinoSerial.begin(9600, SERIAL_8N1, ARDUINO_RX, ARDUINO_TX);
}
void loop() {
  // 스마트폰 → ESP32
  if (SerialBT.available()) {
    char cmd = SerialBT.read();
    Serial.print("BT Command: ");
    Serial.println(cmd);
    // ESP32 → Arduino 전달
    ArduinoSerial.write(cmd);
  }
  // Arduino → ESP32로 오는 데이터도 (디버깅용으로)
  if (ArduinoSerial.available()) {
    char c = ArduinoSerial.read();
    Serial.print("Arduino says: ");
    Serial.println(c);
  }
}
