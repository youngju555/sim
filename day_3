// 초음파 센서로 사람을 감지해서 부저를 울리고 서브 모터를 활용해 스틱을 달아서 스틱을 움직이며 타격하는 RC카 제작. 블루투스로 조종하며 RC카를 사람을 쫓아가며 타격하게 제작.

#include <ESP32Servo.h>  // Servo.h 대신 ESP32 전용 라이브러리

// 핀 정의
#define ENCODER_LEFT 2
#define ENCODER_RIGHT 3

#define IR_LEFT 4
#define IR_RIGHT 8

#define SERVO_PIN 9
#define BUZZER 13

#define ULTRASONIC_TRIG A2
#define ULTRASONIC_ECHO A3

#define MOTOR_LEFT_1 5
#define MOTOR_LEFT_2 6
#define MOTOR_RIGHT_1 10
#define MOTOR_RIGHT_2 11

// 엔코더용 변수
volatile int countLeft = 0;
volatile int countRight = 0;

// 서보
Servo swatter;

// 기본 설정
char command;
long duration;
int distance;

void setup() {
  Serial.begin(9600);

  // 서보
  swatter.setPeriodHertz(50);                    // 서보용 PWM 주파수 설정
  swatter.attach(SERVO_PIN, 500, 2400);          // attach(pin, minPulse, maxPulse)
  swatter.write(90);                             // 대기 자세

  // 부저
  pinMode(BUZZER, OUTPUT);

  // 초음파
  pinMode(ULTRASONIC_TRIG, OUTPUT);
  pinMode(ULTRASONIC_ECHO, INPUT);

  // 엔코더
  pinMode(ENCODER_LEFT, INPUT_PULLUP);
  pinMode(ENCODER_RIGHT, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENCODER_LEFT), countLeftEncoder, RISING);
  attachInterrupt(digitalPinToInterrupt(ENCODER_RIGHT), countRightEncoder, RISING);

  // 모터 핀
  pinMode(MOTOR_LEFT_1, OUTPUT);
  pinMode(MOTOR_LEFT_2, OUTPUT);
  pinMode(MOTOR_RIGHT_1, OUTPUT);
  pinMode(MOTOR_RIGHT_2, OUTPUT);
}

void loop() {
  // Bluetooth 명령 수신
  if (Serial.available()) {
    command = Serial.read();
    handleCommand(command);
  }

  // 초음파 감지
  distance = getDistance();
  if (distance > 0 && distance < 30) {
    alertAndSwat(); // 부저 + 파리채 휘두르기
  }

  delay(50);
}

// 📏 거리 측정 함수
int getDistance() {
  digitalWrite(ULTRASONIC_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(ULTRASONIC_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(ULTRASONIC_TRIG, LOW);
  duration = pulseIn(ULTRASONIC_ECHO, HIGH, 20000);
  if (duration == 0) return -1; // 실패 시
  return duration * 0.034 / 2;
}

// 🔔 사람 감지 시 행동
void alertAndSwat() {
  tone(BUZZER, 1000, 300); // 부저 울림
  swatter.write(0);        // 파리채 휘두르기
  delay(300);
  swatter.write(90);       // 원위치
  delay(500);
}

// 🎮 조작 명령 처리
void handleCommand(char cmd) {
  switch (cmd) {
    case 'F': moveForward(); break;
    case 'B': moveBackward(); break;
    case 'L': turnLeft(); break;
    case 'R': turnRight(); break;
    case 'S': stopMotors(); break;
  }
}

// ⚙️ 모터 제어 함수들
void moveForward() {
  countLeft = 0; countRight = 0;
  analogWrite(MOTOR_LEFT_1, 150); digitalWrite(MOTOR_LEFT_2, LOW);
  analogWrite(MOTOR_RIGHT_1, 150); digitalWrite(MOTOR_RIGHT_2, LOW);

  // 엔코더 값 동기화 → 30회전마다 멈추기 예시
  while (abs(countLeft - countRight) < 5 && (countLeft < 30 && countRight < 30)) {
    if (countLeft > countRight) {
      analogWrite(MOTOR_LEFT_1, 130);
      analogWrite(MOTOR_RIGHT_1, 150);
    } else if (countRight > countLeft) {
      analogWrite(MOTOR_LEFT_1, 150);
      analogWrite(MOTOR_RIGHT_1, 130);
    } else {
      analogWrite(MOTOR_LEFT_1, 150);
      analogWrite(MOTOR_RIGHT_1, 150);
    }
  }

  stopMotors();
}

void moveBackward() {
  analogWrite(MOTOR_LEFT_1, LOW); analogWrite(MOTOR_LEFT_2, 150);
  analogWrite(MOTOR_RIGHT_1, LOW); analogWrite(MOTOR_RIGHT_2, 150);
}

void turnLeft() {
  analogWrite(MOTOR_LEFT_1, LOW); analogWrite(MOTOR_LEFT_2, 150);
  analogWrite(MOTOR_RIGHT_1, 150); digitalWrite(MOTOR_RIGHT_2, LOW);
}

void turnRight() {
  analogWrite(MOTOR_LEFT_1, 150); digitalWrite(MOTOR_LEFT_2, LOW);
  analogWrite(MOTOR_RIGHT_1, LOW); analogWrite(MOTOR_RIGHT_2, 150);
}

void stopMotors() {
  analogWrite(MOTOR_LEFT_1, 0); analogWrite(MOTOR_LEFT_2, 0);
  analogWrite(MOTOR_RIGHT_1, 0); analogWrite(MOTOR_RIGHT_2, 0);
}

// 🌀 엔코더 인터럽트 함수
void countLeftEncoder() {
  countLeft++;
}

void countRightEncoder() {
  countRight++;
}
